import 'dart:convert'; // JSON 데이터를 다루기 위한 패키지
import 'package:flutter/material.dart'; // Flutter의 Material 디자인 위젯을 사용하기 위한 패키지
import 'package:http/http.dart' as http; // HTTP 요청을 보내기 위한 패키지

void main() {
  runApp(MyApp()); // 앱 실행
}

class MyApp extends StatelessWidget {
  // 앱의 최상위 위젯
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: MyHomePage(), // 앱의 홈페이지 설정
    );
  }
}

class MyHomePage extends StatefulWidget {
  // 상태를 가지는 위젯
  @override
  _MyHomePageState createState() => _MyHomePageState(); // 상태 생성
}

class _MyHomePageState extends State<MyHomePage> {
  // 상태 클래스
  String result = ""; // 예측 결과를 저장할 문자열
  String result_1 = ""; // 예측 확률을 저장할 문자열
  TextEditingController urlController =
      TextEditingController(); // URL을 입력 받는 컨트롤러

  Future<void> fetchData() async {
    // 예측 결과를 가져오는 함수
    try {
      final enteredUrl = urlController.text; // 입력된 URL 가져오기
      final response = await http.get(
        Uri.parse(enteredUrl + "sample"), // 입력된 URL 사용
        headers: {
          'Content-Type': 'application/json',
          'ngrok-skip-browser-warning': '69420',
        },
      );
      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        setState(() {
          result = "예측값: ${data['predicted_label']}"; // 예측 결과를 문자열에 저장
        });
      } else {
        setState(() {
          result = "Failed to fetch data. Status Code: ${response.statusCode}";
        });
      }
    } catch (e) {
      setState(() {
        result = "Error: $e";
      });
    }
  }

  Future<void> fetchData_1() async {
    // 예측 확률을 가져오는 함수
    try {
      final enteredUrl = urlController.text; // 입력된 URL 가져오기
      final response = await http.get(
        Uri.parse(enteredUrl + "sample"), // 입력된 URL 사용
        headers: {
          'Content-Type': 'application/json',
          'ngrok-skip-browser-warning': '69420',
        },
      );
      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        setState(() {
          result_1 = "예측 정확도: ${data['prediction_score']}"; // 예측 확률을 문자열에 저장
        });
      } else {
        setState(() {
          result = "Failed to fetch data. Status Code: ${response.statusCode}";
        });
      }
    } catch (e) {
      setState(() {
        result = "Error: $e";
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    // UI를 구성하는 함수
    return Scaffold(
      appBar: AppBar(
        leading: Container(
          margin: EdgeInsets.all(10.0),
          child: Image.network(
            'https://th.bing.com/th/id/OIP.heMlgbnwl4NvxEt4QZg-EwHaHa?w=186&h=186&c=7&r=0&o=5&dpr=1.3&pid=1.7',
            width: 40,
            height: 40,
          ),
        ),
        backgroundColor: Color(0xff37803a), // 앱 바 배경색 설정
        title: Center(child: Text('Jellyfish Classfier')), // 앱 바 제목 설정
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Image.network(
              'https://th.bing.com/th/id/OIP.mHXMZ85oq5gYgjeVg4mWjQHaE7?w=256&h=180&c=7&r=0&o=5&dpr=1.3&pid=1.7',
              width: 300,
              height: 300,
            ),
            TextField(
              controller: urlController, // URL 입력을 위한 TextField
              decoration: InputDecoration(labelText: "URL 입력"), // 입력 필드의 라벨
            ),
            Row(
              mainAxisAlignment: MainAxisAlignment.center, // Row 내부 요소를 가운데 정렬
              children: [
                ElevatedButton(
                  onPressed: fetchData,
                  child: Text("예측결과 버튼"),
                ),
                Text(
                  result,
                  style: TextStyle(fontSize: 18),
                ),
                SizedBox(width: 50), // 버튼 사이에 간격 추가
                ElevatedButton(
                  onPressed: fetchData_1,
                  child: Text("예측확률 버튼"),
                ),
                Text(
                  result_1,
                  style: TextStyle(fontSize: 18),
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }
}

// 회고: 처음에는 파이썬 코드와 다트 코드를 분리하여 작성하고, 마지막 단계에서 네트워크 이미지를 불러와 완성된 코드를 가볍게 수정할 계획이었습니다. 어제 쉽게 구현했던 fastAPI와 VGG16 모델을 사용하여 이미지를 입력받아 분류 결과를 반환하는 API를 구현하려 했습니다. 그러나, 외부 이미지 링크를 통한 호출을 위한 코드 수정 과정에서 다수의 오류가 발생하였고, 이를 디버깅하고 수정하는 데 예상보다 많은 시간이 소요되었습니다.

Template에 있는 모든 기본 및 심화 문제를 풀어야 한다는 강박관념에 사로잡혀 하루와 반나절을 보냈습니다. 결과적으로 퀘스트 5에서 심리적, 체력적으로 원치 않는 영향을 받게 되어 아쉬움이 남습니다.

하지만, 이러한 경험을 통해 내일부터는 좀 더 내려놓고 여유롭게, 즐겁게 학습할 수 있는 자세와 성격으로 개선할 수 있도록 노력할 것입니다. 또한, 앞으로는 모든 미션의 완성이라는 강박관념에 매달리기보다는 부족하더라도 동료들과의 학습 과정 자체를 즐기며 성장할 수 있도록 mindset을 변화시킬 생각입니다. 
