import uvicorn  # Uvicorn 서버를 가져옵니다
import numpy as np  # NumPy를 가져옵니다
from fastapi import FastAPI, Request  # FastAPI와 Request 클래스를 가져옵니다
from fastapi.responses import HTMLResponse, FileResponse  # HTMLResponse와 FileResponse 클래스를 가져옵니다
from tensorflow.keras.applications.vgg16 import VGG16, preprocess_input, decode_predictions  # VGG16 모델과 관련 함수들을 가져옵니다
from tensorflow.keras.preprocessing import image  # 이미지 전처리 함수를 가져옵니다

app = FastAPI()  # FastAPI 애플리케이션을 생성합니다

# VGG16 모델 로드
model = VGG16(weights='imagenet')

# 버튼 클릭 카운터
beach_count = 0
aquarium_count = 0

@app.get("/", response_class=HTMLResponse)
async def read_root():
    # HTML 페이지를 반환합니다
    return f"""
    <html>
        <head>
            <title>Jellyfish Classifier</title>
            <style>
                .app-bar {{
                    display: flex;
                    align-items: center;
                    background-color: #f8f8f8;
                    padding: 10px;
                    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
                }}
                .app-bar img {{
                    width: 50px;
                    height: 50px;
                    margin-right: 10px;
                }}
                .app-bar h1 {{
                    margin: 0;
                }}
            </style>
        </head>
        <body>
            <div class="app-bar">
                <img src="/image/icon" alt="Jellyfish Icon">
                <h1>Jellyfish Classifier</h1>
            </div>
            <div style="text-align: center; margin-top: 20px;">
                <img src="/image/jellyfish" width="300" height="300" alt="Jellyfish Image">
                <br><br>
                <button onclick="location.href='/classify?type=beach'">바닷가</button>
                <button onclick="location.href='/classify?type=aquarium'">어항</button>
                <p>바닷가 버튼 클릭 횟수: {beach_count}</p>
                <p>어항 버튼 클릭 횟수: {aquarium_count}</p>
            </div>
        </body>
    </html>
    """

@app.get("/image/icon", response_class=FileResponse)
async def get_icon_image():
    # 아이콘 이미지를 반환합니다
    img_path = '/mnt/data/q28-2.webp'
    return FileResponse(img_path)

@app.get("/image/jellyfish", response_class=FileResponse)
async def get_jellyfish_image():
    # 해파리 이미지를 반환합니다
    img_path = '/mnt/data/q28 1.webp'
    return FileResponse(img_path)

@app.get("/classify")
async def classify_jellyfish(request: Request):
    global beach_count, aquarium_count
    type = request.query_params.get('type')
    
    if type == 'beach':
        beach_count += 1
    elif type == 'aquarium':
        aquarium_count += 1

    img_path = '/mnt/data/q28 1.webp'
    img = image.load_img(img_path, target_size=(224, 224))
    img_array = image.img_to_array(img)
    img_array = np.expand_dims(img_array, axis=0)
    img_array = preprocess_input(img_array)

    predictions = model.predict(img_array)
    decoded_predictions = decode_predictions(predictions, top=3)[0]

    if type == 'beach':
        print(f"예측 결과 (해파리 클래스): {decoded_predictions}")
    elif type == 'aquarium':
        print(f"예측 확률: {predictions}")

    return {
        "type": type,
        "predictions": decoded_predictions,
        "beach_count": beach_count,
        "aquarium_count": aquarium_count,
        "result_message": f"Classify type: {type}"
    }

if __name__ == "__main__":
    uvicorn.run(app, host='0.0.0.0', port=8001)  # Uvicorn 서버를 실행합니다
      ),
    );
  }
}

